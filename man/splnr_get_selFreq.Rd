% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{splnr_get_selFreq}
\alias{splnr_get_selFreq}
\title{Prepare Data to Plot Selection Frequency of Planning Units}
\usage{
splnr_get_selFreq(solnMany, type = "portfolio")
}
\arguments{
\item{solnMany}{A \code{list} of \code{prioritizr} solutions (if \code{type = "list"})
or a single \code{sf} object representing a \code{prioritizr} portfolio of solutions
(if \code{type = "portfolio"}). Each individual solution must contain a
column named \code{solution_1}.}

\item{type}{A character string indicating the input type: \code{"portfolio"}
(for a single \code{sf} object with multiple solution columns) or \code{"list"}
(for a list of single-solution \code{sf} objects). Defaults to \code{"portfolio"}.}
}
\value{
An \code{sf} object (\code{selFreq}) containing a column named \code{selFreq}.
This column is a factor representing the selection frequency (sum of
selected occurrences across all solutions) for each planning unit.
}
\description{
\code{splnr_get_selFreq()} calculates how many times each planning unit is
selected across an array of \code{prioritizr} solutions. This "selection
frequency" can be derived from either a list of individual solutions or
a \code{prioritizr} portfolio object.
}
\details{
Understanding selection frequency is crucial for identifying robust
conservation areasâ€”those that are consistently chosen across multiple
planning scenarios or alternative optimal solutions.

The function supports two types of input:
\itemize{
\item \code{"portfolio"}: If \code{solnMany} is a single \code{sf} object representing a
portfolio of solutions (e.g., generated by \code{prioritizr::add_cuts_portfolio()}).
In this case, the function assumes columns starting with "solution_"
represent individual solutions within the portfolio.
\item \code{"list"}: If \code{solnMany} is a \code{list} where each element is an \code{sf}
object representing a single \code{prioritizr} solution (each with a
"solution_1" column).
}
For both types, the function sums the binary \code{solution} values (0 or 1)
across all solutions for each planning unit. The result is converted to a
factor to represent discrete frequency levels.

The output \code{sf} object can then be passed to \code{splnr_plot_selectionFreq()}
for visualization as a heatmap.
}
\examples{
\dontrun{
# Assuming 'dat_species_bin' is an existing sf object in your package.

# Create a base prioritizr problem.
dat_problem <- prioritizr::problem(
  dat_species_bin \%>\% dplyr::mutate(Cost = runif(n = dim(.)[[1]])),
  features = c("Spp1", "Spp2", "Spp3", "Spp4", "Spp5"),
  cost_column = "Cost"
) \%>\%
  prioritizr::add_min_set_objective() \%>\%
  prioritizr::add_relative_targets(0.3) \%>\%
  prioritizr::add_binary_decisions() \%>\%
  prioritizr::add_default_solver(verbose = FALSE)

# --- Example 1: Using a portfolio of solutions ---
# Create a conservation problem that contains a portfolio of solutions (e.g., 5 solutions).
dat_soln_portfolio <- dat_problem \%>\%
  prioritizr::add_cuts_portfolio(number_solutions = 5) \%>\%
  prioritizr::solve.ConservationProblem()

# Calculate selection frequency from the portfolio.
selFreq_portfolio <- splnr_get_selFreq(solnMany = dat_soln_portfolio, type = "portfolio")
print(head(selFreq_portfolio))
# You can then plot this: splnr_plot_selectionFreq(selFreq_portfolio)

# --- Example 2: Using a list of individual solutions ---
# Solve the problem multiple times to get different solutions (e.g., by randomizing costs)
dat_soln_list <- list(
  dat_problem \%>\% prioritizr::solve.ConservationProblem(),
  dat_problem \%>\%
    dplyr::mutate(Cost = runif(n = dim(.)[[1]])) \%>\% # Vary cost for a different solution
    prioritizr::solve.ConservationProblem(),
  dat_problem \%>\%
    dplyr::mutate(Cost = runif(n = dim(.)[[1]])) \%>\% # Another different solution
    prioritizr::solve.ConservationProblem()
)

# Calculate selection frequency from the list of solutions.
selFreq_list <- splnr_get_selFreq(solnMany = dat_soln_list, type = "list")
print(head(selFreq_list))
# You can then plot this: splnr_plot_selectionFreq(selFreq_list)
}
}
