% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/splnr_gg_add.R
\name{splnr_gg_add}
\alias{splnr_gg_add}
\title{Add-ons for Plotting \code{spatialplanr} Maps}
\usage{
splnr_gg_add(
  PUs = NULL,
  colorPUs = "grey80",
  Bndry = NULL,
  colorBndry = "black",
  overlay = NULL,
  colorOverlay = "grey20",
  overlay2 = NULL,
  colorOverlay2 = "grey30",
  overlay3 = NULL,
  colorOverlay3 = "grey40",
  contours = NULL,
  colorConts = "black",
  cropOverlay = NULL,
  lockIn = NULL,
  typeLockIn = "Full",
  nameLockIn = NULL,
  alphaLockIn = 0.5,
  colorLockIn = "black",
  legendLockIn = "",
  labelLockIn = "MPAs",
  ggtheme = "Default"
)
}
\arguments{
\item{PUs}{An \code{sf} object representing planning units. If provided, their
outlines will be drawn. Defaults to \code{NULL}.}

\item{colorPUs}{A character string specifying the color for the outlines of the
planning units. Defaults to \code{"grey80"}.}

\item{Bndry}{An \code{sf} object representing the main planning region boundaries.
If provided, its outline will be drawn. Defaults to \code{NULL}.}

\item{colorBndry}{A character string specifying the color for the outline of the
\code{Bndry} object. Defaults to \code{"black"}.}

\item{overlay}{An \code{sf} object to be plotted as a general overlay. Defaults to \code{NULL}.}

\item{colorOverlay}{A character string specifying the color for \code{overlay}.
Defaults to \code{"grey20"}.}

\item{overlay2}{An \code{sf} object for a second general overlay. Defaults to \code{NULL}.}

\item{colorOverlay2}{A character string specifying the color for \code{overlay2}.
Defaults to \code{"grey30"}.}

\item{overlay3}{An \code{sf} object for a third general overlay. Defaults to \code{NULL}.}

\item{colorOverlay3}{A character string specifying the color for \code{overlay3}.
Defaults to \code{"grey40"}.}

\item{contours}{An \code{sf} object containing contour lines (e.g., bathymetry or
seamount outlines). It is expected to have a \code{Category} column for differentiating
lines. Up to 6 categories are supported. Defaults to \code{NULL}.}

\item{colorConts}{A character string specifying the color for the contour lines.
Defaults to \code{"black"}.}

\item{cropOverlay}{An \code{sf} object. Its bounding box will be used to set the
\code{xlim} and \code{ylim} of the \code{ggplot2::coord_sf} layer, effectively cropping the view.
Defaults to \code{NULL}.}

\item{lockIn}{An \code{sf} object representing 'locked-in' areas (e.g., existing
Marine Protected Areas) that are fixed in a conservation prioritization.
Defaults to \code{NULL}.}

\item{typeLockIn}{A character string specifying how \code{lockIn} areas should be
plotted. Can be \code{"Full"} (fills the areas with \code{colorLockIn}) or \code{"Contours"}
(draws only the outlines of the areas). Defaults to \code{"Full"}.}

\item{nameLockIn}{A character string specifying the column name in the \code{lockIn}
data frame that contains binary (0/1 or TRUE/FALSE) information indicating
locked-in status. Required if \code{lockIn} is not \code{NULL}.}

\item{alphaLockIn}{A numeric value (0 to 1) for the opacity of the \code{lockIn}
areas when \code{typeLockIn} is \code{"Full"}. Defaults to \code{0.5}.}

\item{colorLockIn}{A character string specifying the color for the \code{lockIn} areas.
Defaults to \code{"black"}.}

\item{legendLockIn}{A character string for the title of the \code{lockIn} legend.
Can be an empty string \code{""} to suppress the title. Defaults to \code{""}.}

\item{labelLockIn}{A character string for the legend label of the \code{lockIn} areas
(e.g., "MPAs"). Defaults to \code{"MPAs"}.}

\item{ggtheme}{The \code{ggplot2} theme to apply. Can be:
\itemize{
\item \code{NA} or \code{FALSE}: No theme is applied, using \code{ggplot2} defaults.
\item \code{"Default"}: Applies a \code{spatialplanr} default theme (\code{theme_bw()}
with custom text/axis settings).
\item A \code{list} of \code{ggplot2::theme()} properties for custom styling.
}
Defaults to \code{"Default"}.}
}
\value{
A \code{list} of \code{ggplot2} layers and theme elements that can be added to
an existing \code{ggplot} object using \code{+}.
}
\description{
This function allows users to customize existing \code{ggplot2} maps, particularly
those produced by other \code{spatialplanr} spatial plotting functions. It provides
options to add various spatial layers and apply consistent theming in a
simple and reproducible manner.
}
\details{
The \code{splnr_gg_add} function enhances \code{ggplot2} objects by layering additional
spatial data such as planning unit outlines, study area boundaries, general
overlays, geographical contours, and 'locked-in' areas (e.g., existing protected
areas in a conservation prioritization). It offers fine-grained control over
colors, opacities, and legend appearance for each added layer.

When using \code{contours}, the input \code{sf} object is expected to have a column
named \code{Category} that defines the different contour lines to be plotted.
The function currently supports up to 6 distinct contour categories for plotting.

The \code{ggtheme} parameter offers flexibility in plot styling. \code{"Default"} applies
a standard \code{spatialplanr} theme (\code{theme_bw()} with custom text and axis settings).
A \code{list} of \code{ggplot2::theme()} elements can be provided for full customization,
or \code{NA} (logical \code{FALSE}) to apply no default theme, allowing the user to manage
all theme elements manually.
}
\examples{
\dontrun{
# Assuming 'dat_species_bin' and 'dat_PUs' are existing sf objects
# in your package, suitable for prioritisation problems and plotting.

# Create a dummy prioritizr problem and solve it for demonstration.
dat_problem <- prioritizr::problem(
  dat_species_bin \%>\% dplyr::mutate(Cost = runif(n = dim(.)[[1]])),
  features = c("Spp1", "Spp2", "Spp3", "Spp4", "Spp5"),
  cost_column = "Cost"
) \%>\%
  prioritizr::add_min_set_objective() \%>\%
  prioritizr::add_relative_targets(0.3) \%>\%
  prioritizr::add_binary_decisions() \%>\%
  prioritizr::add_default_solver(verbose = FALSE)

dat_soln <- dat_problem \%>\%
  prioritizr::solve.ConservationProblem()

# Basic plot of the solution with default planning unit outlines and theme.
plot_basic <- splnr_plot_solution(dat_soln) +
  splnr_gg_add(PUs = dat_PUs, ggtheme = "Default")
print(plot_basic)

# Example with boundary, a custom overlay, and locked-in areas shown as contours.
# For this example, let's create dummy `bndry_sf` and `locked_in_sf` based on `dat_PUs`
# In a real scenario, these would be loaded from your package or data.
bndry_sf <- sf::st_union(dat_PUs) \%>\% sf::st_as_sf()
locked_in_sf <- dat_PUs[1:100, ] \%>\% dplyr::mutate(is_mpa = 1)

plot_custom <- splnr_plot_solution(dat_soln) +
  splnr_gg_add(
    PUs = dat_PUs,
    Bndry = bndry_sf,
    colorBndry = "darkblue",
    overlay = bndry_sf, # Using boundary as an example overlay
    colorOverlay = "lightblue",
    alphaOverlay = 0.3,
    lockIn = locked_in_sf,
    typeLockIn = "Contours",
    nameLockIn = "is_mpa",
    colorLockIn = "darkred",
    labelLockIn = "Existing MPAs",
    ggtheme = "Default"
  )
print(plot_custom)

# Example with custom ggplot2 theme settings (as a list)
custom_theme_list <- list(
  ggplot2::theme_classic(),
  ggplot2::theme(
    plot.background = ggplot2::element_rect(fill = "lightyellow"),
    legend.position = "top"
  )
)
plot_with_custom_theme <- splnr_plot_solution(dat_soln) +
  splnr_gg_add(PUs = dat_PUs, ggtheme = custom_theme_list)
print(plot_with_custom_theme)
}
}
