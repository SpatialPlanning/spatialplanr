% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/splnr_plotting.R
\name{splnr_plot_costOverlay}
\alias{splnr_plot_costOverlay}
\title{Plot Cost Overlay on Solution}
\usage{
splnr_plot_costOverlay(
  soln,
  cost = NA,
  costName = "Cost",
  legendTitle = "Cost",
  plotTitle = "Solution overlaid with cost"
)
}
\arguments{
\item{soln}{The \code{prioritizr} solution object, expected as an \code{sf} object,
containing at least a \code{solution_1} column.}

\item{cost}{An \code{sf} object containing the cost data for planning units.
If the \code{prioritizr} solution \code{soln} already contains the cost column
specified by \code{costName}, this parameter can be \code{NA} (default). Otherwise,
provide an \code{sf} object with the cost data.}

\item{costName}{A character string specifying the name of the cost column
within the \code{soln} object or the \code{Cost} object. Defaults to \code{"Cost"}.}

\item{legendTitle}{A character string for the title of the cost legend.
Defaults to \code{"Cost"}.}

\item{plotTitle}{A character string for the subtitle of the plot.
Defaults to \code{"Solution overlaid with cost"}.}
}
\value{
A \code{ggplot} object representing the solution with cost overlay.
}
\description{
The \code{splnr_plot_costOverlay()} function visualizes the cost of each planning
unit overlaid on the solution of a \code{prioritizr} conservation problem. This
allows for a customizable \code{ggplot2} visualization, highlighting the costs
within selected planning units.
}
\details{
This function requires a \code{prioritizr} solution as an \code{sf} object, which
must contain a \code{solution_1} column indicating selected (1) or unselected (0)
planning units. It also requires a cost column, either present within the
\code{soln} object or provided separately via the \code{Cost} parameter.

The function filters the solution to show only the selected planning units
and then overlays these with a gradient representing the cost. This output
is a \code{ggplot} object that can be further customized using \code{splnr_gg_add()}.
}
\examples{
\dontrun{
# Assuming 'dat_species_bin' is an existing sf object in your package.

# Create a dummy prioritizr problem and solve it for demonstration.
dat_problem <- prioritizr::problem(
  dat_species_bin \%>\% dplyr::mutate(Cost = runif(n = dim(.)[[1]])),
  features = c("Spp1", "Spp2", "Spp3", "Spp4", "Spp5"),
  cost_column = "Cost"
) \%>\%
  prioritizr::add_min_set_objective() \%>\%
  prioritizr::add_relative_targets(0.3) \%>\%
  prioritizr::add_binary_decisions() \%>\%
  prioritizr::add_default_solver(verbose = FALSE)

dat_soln <- dat_problem \%>\%
  prioritizr::solve.ConservationProblem()

# Plot the solution overlaid with cost
plot_cost_overlay <- splnr_plot_costOverlay(soln = dat_soln)
print(plot_cost_overlay)

# Example: If cost is in a separate sf object (e.g., dat_PUs with a cost column)
# Create a dummy cost column in dat_PUs for this example
# Replace this with your actual cost data if it's external
dat_PUs_with_cost <- dat_PUs \%>\% dplyr::mutate(MyCost = runif(n = dim(.)[[1]]))
plot_cost_overlay_external <- splnr_plot_costOverlay(
  soln = dat_soln,
  cost = dat_PUs_with_cost,
  costName = "MyCost",
  legendTitle = "Custom Cost",
  plotTitle = "Solution with External Cost"
)
print(plot_cost_overlay_external)
}
}
